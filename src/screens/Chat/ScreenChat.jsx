/*===============================================================================*/
/* Made By Evaldo Silva on 21/07/2019                                            */
/* GITHUB: https://github.com/evaldosilva                                        */
/*===============================================================================*/

import React, { Component, Fragment } from "react";
import ChatMessageBox from "../../components/Chat/ChatMessageBox";
import ChatMessageList from "../../components/Chat/ChatMessageList";
import "./ScreenChat.css";

// Fake control to manage the message ids. In this example I made it simple,
// just a counter, but it might be an UUID or a GUID, generated by some API
// or another tool.
let messageIdControl = 0;

// Temporary list to change the state of the message list.
let tmpChatMessageList = [];

// Participants of the chat.
// Feel free to change, add or remove avatars.
const tmpChatAvatars = [
  { id: "1", name: "Homer", totalLikes: 0, avatarStyle: "message-avatar1" },
  { id: "2", name: "Margie", totalLikes: 0, avatarStyle: "message-avatar2" },
  { id: "3", name: "Bart", totalLikes: 0, avatarStyle: "message-avatar3" },
  { id: "4", name: "Lisa", totalLikes: 0, avatarStyle: "" }
];

//===============================================================================
// ScreenChat: screen to manage all the chat components, data and logic.
//===============================================================================
class ScreenChat extends Component {
  constructor(props) {
    super(props);
    this.state = { chatMessageList: [], chatAvatars: tmpChatAvatars };
    this.handleChatMessageBoxMessage = this.handleChatMessageBoxMessage.bind(
      this
    );
    this.handleOnClickClearAll = this.handleOnClickClearAll.bind(this);
    this.handleTotalLikesCount = this.handleTotalLikesCount.bind(this);
  }

  handleOnClickClearAll() {
    // Clear all data of the chat (like counts, total like counts, messages and so on)
    tmpChatAvatars.map(avatar => (avatar.totalLikes = 0));
    tmpChatMessageList = [];
    this.setState({ chatMessageList: [] });
    this.setState({ chatAvatars: tmpChatAvatars });
    messageIdControl = 0;
  }

  handleChatMessageBoxMessage(avatarId, chatMessage, chatMessageLikesCount) {
    // Handle the act of add messages to the message stack.
    this.addMessageToStack(avatarId, chatMessage, chatMessageLikesCount);
  }

  addMessageToStack(avatarId, chatMessage, chatMessageLikesCount) {
    // Adds messages to the message stack.

    let name = "";
    let avatarStyle = "";

    // Sync the temporally list with the state data.
    tmpChatMessageList = this.state.chatMessageList;

    // Find additional data from the message sender (aka avatar).
    this.state.chatAvatars.map(avatar => {
      if (avatar.id === avatarId) {
        name = avatar.name;
        avatarStyle = avatar.avatarStyle;
      }
      return name;
    });

    // Adds the complete information to the message stack.
    tmpChatMessageList.push({
      id: messageIdControl++,
      avatarId: avatarId,
      message: chatMessage,
      avatarName: name,
      avatarStyle: avatarStyle,
      likesCount: chatMessageLikesCount
    });

    // Updates the state.
    this.setState({ chatMessageList: tmpChatMessageList });
  }

  handleTotalLikesCount(avatarId, messageId, increment) {
    // Handles the act of update the total count of likes.

    // Update the total count of likes of an avatar
    this.updateAvatarTotalLikesCount(avatarId, increment);
    // Update the total likes of a single chat message
    this.updateChatMessageLikesCount(messageId, increment);
  }

  updateAvatarTotalLikesCount(avatarId, increment) {
    // Update the number of likes of an avatar, finding it by its id.
    tmpChatAvatars.map(avatar => {
      if (avatar.id === avatarId) {
        avatar.totalLikes += increment;
      }
      return avatar;
    });
    this.setState({ chatAvatars: tmpChatAvatars });
  }

  updateChatMessageLikesCount(messageId, increment) {
    // Update the number of likes of a post, finding it by its id.

    // Sync the temporally list with the state data.
    tmpChatMessageList = this.state.chatMessageList;

    // Updates the number of likes count.
    tmpChatMessageList.map(chatMessage => {
      if (chatMessage.id === messageId) chatMessage.likesCount += increment;
      return chatMessage;
    });

    // Updates the state.
    this.setState({ chatMessageList: tmpChatMessageList });
  }

  render() {
    return (
      // Render the entire application
      <Fragment>
        <div className="title-jumbotron">
          <strong>SPRINGFIELD CHAT by Evaldo Silva</strong>
          <p>
            This example covers topics like: CSS Mobile friendly, React Main
            Concepts and something on React project folder structure (please see
            the entire project on GitHub{" "}
            <a href="https://github.com/evaldosilva">
              https://github.com/evaldosilva
            </a>
            ).
          </p>
          <p>
            <strong>How to use: </strong>To start, type some text in some avatar
            textarea and send the message. Those areas may appear at the bottom
            of your screen if you access it from a mobile device (on screen
            smallers than 820 px). The message will appears at the posts area.
            You can "like" some post by clicking on like button to see the post
            like count increase. Send another message from the same avatar and
            like it too. Independent posts has individual counts, but the avatar
            gets the total amount of "likes" from all of his posts. You can
            reset the data pressing "clear all" button.
          </p>
        </div>
        <div className="screen-chat-container">
          <div className="item-screen-chat-container-message-boxes">
            {this.state.chatAvatars.map(avatar => (
              <ChatMessageBox
                key={avatar.id}
                avatar={avatar}
                handleChatMessageBoxMessage={this.handleChatMessageBoxMessage}
              />
            ))}
          </div>
          <div className="item-screen-chat-container">
            <ChatMessageList
              messageList={this.state.chatMessageList}
              handleTotalLikesCount={this.handleTotalLikesCount}
            />
            <br />
            <button
              className="standard-big-button"
              onClick={this.handleOnClickClearAll}
            >
              Clear All
            </button>
          </div>
        </div>
      </Fragment>
    );
  }
}

export default ScreenChat;
